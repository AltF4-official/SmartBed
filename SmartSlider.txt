<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>SmartSlider - Haptics & Snap</title>
  <style>
    :root {
      --accent: #00f2ff;
    }
    body {
      margin: 0;
      padding: 0;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #2c3e50, #4ca1af);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      user-select: none;
    }
    .slider-container {
      position: relative;
      width: 280px;
      height: 48px;
      cursor: pointer;
    }
    .slider-track {
      position: absolute;
      top: 16px;
      left: 0;
      right: 0;
      height: 16px;
      border-radius: 8px;
      background: linear-gradient(135deg, rgba(255 255 255 / 0.18), rgba(255 255 255 / 0)),
                  linear-gradient(to right bottom, rgba(255 255 255 / 0.12), rgba(255 255 255 / 0));
      box-shadow: 0 8px 32px rgba(0 0 0 / 0.1), inset 0 0 8px rgba(255 255 255 / 0.25);
    }
    .slider-thumb {
      position: absolute;
      top: 6px;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: linear-gradient(145deg, #00f2ff 0%, #00b2cc 100%);
      box-shadow: 0 6px 18px var(--accent), 0 0 28px rgba(0, 255, 255, 0.7), inset 0 0 14px rgba(255 255 255 / 0.7);
      transform: translateX(-50%) scale(1);
      transition: transform 0.15s ease-out;
      cursor: grab;
      z-index: 2;
    }
    .slider-thumb.dragging {
      cursor: grabbing;
      transform: translateX(-50%) scale(1.1) rotate(4deg);
      box-shadow: 0 8px 28px var(--accent), 0 0 36px rgba(0, 255, 255, 0.85), inset 0 0 18px rgba(255 255 255 / 0.85);
      transition: none;
    }
    .percentage-label {
      position: absolute;
      top: -36px;
      left: 50%;
      transform: translateX(-50%) scale(1);
      background: rgba(0, 0, 0, 0.3);
      color: white;
      font-weight: 600;
      font-size: 16px;
      padding: 6px 12px;
      border-radius: 14px;
      backdrop-filter: blur(8px);
      user-select: none;
      transition: opacity 0.4s ease, transform 0.4s ease;
      white-space: nowrap;
      pointer-events: none;
      z-index: 3;
    }
    .snap-bounce {
      animation: snapBounce 0.4s ease forwards;
    }
    .bounceback {
      animation: bounceback 1.2s cubic-bezier(0.25, 0.75, 0.5, 1);
    }
    .edgeBounceLeft {
      animation: edgeBounceLeft 1.2s cubic-bezier(0.25, 0.75, 0.5, 1);
    }
    .edgeBounceRight {
      animation: edgeBounceRight 1.2s cubic-bezier(0.25, 0.75, 0.5, 1);
    }
    @keyframes snapBounce {
      0% { transform: translateX(-50%) scale(1.4, 0.6) rotate(6deg); }
      50% { transform: translateX(-50%) scale(0.9, 1.1) rotate(-4deg); }
      100% { transform: translateX(-50%) scale(1, 1) rotate(0deg); }
    }
    @keyframes bounceback {
      0% { transform: translateX(-50%) scale(1.15, 0.85) rotate(3deg); }
      50% { transform: translateX(-50%) scale(0.95, 1.05) rotate(-2deg); }
      100% { transform: translateX(-50%) scale(1, 1) rotate(0deg); }
    }
    @keyframes edgeBounceLeft {
      0% { transform: translateX(-50%) scale(1.2, 0.7) translateX(0) rotate(-5deg); }
      50% { transform: translateX(-50%) scale(1, 1) translateX(1px) rotate(3deg); }
      100% { transform: translateX(-50%) scale(1, 1) translateX(0) rotate(0deg); }
    }
    @keyframes edgeBounceRight {
      0% { transform: translateX(-50%) scale(1.2, 0.7) translateX(0) rotate(5deg); }
      50% { transform: translateX(-50%) scale(1, 1) translateX(-1px) rotate(-3deg); }
      100% { transform: translateX(-50%) scale(1, 1) translateX(0) rotate(0deg); }
    }
  </style>
</head>
<body>

  <div class="slider-container" id="sliderContainer">
    <div class="slider-track"></div>
    <div class="slider-thumb" id="sliderThumb" role="slider" aria-valuemin="0" aria-valuemax="100" aria-valuenow="50" tabindex="0">
      <div class="percentage-label" id="percentageLabel">50%</div>
    </div>
  </div>

  <script>
    (function(){
      const slider = document.getElementById('sliderContainer');
      const thumb = document.getElementById('sliderThumb');
      const label = document.getElementById('percentageLabel');

      let value = 50;
      let velocity = 0;
      let dragging = false;
      let pointerX = null;
      let animationFrame = null;
      let bounceTimeout = null;
      let snapTimeout = null;

      const snapPoints = [0, 50, 100];
      const snapRadius = 5; // reduced from 8
      const lockForce = 0.15; // reduced from 0.3

      function vibrate(pattern) {
        if (navigator.vibrate) navigator.vibrate(pattern);
      }

      function clearBounce() {
        thumb.classList.remove('bounceback', 'edgeBounceLeft', 'edgeBounceRight');
        if (bounceTimeout) clearTimeout(bounceTimeout);
      }

      function clearSnap() {
        thumb.classList.remove('snap-bounce');
        if (snapTimeout) clearTimeout(snapTimeout);
      }

      function triggerBounce(side) {
        clearBounce();
        if (side === 'left') {
          thumb.classList.add('edgeBounceLeft');
        } else if (side === 'right') {
          thumb.classList.add('edgeBounceRight');
        } else {
          thumb.classList.add('bounceback');
        }
        vibrate([6, 18]);
        bounceTimeout = setTimeout(clearBounce, 1200);
      }

      function snapToValue(val) {
        let snapped = Math.round(val);
        for (const sp of snapPoints) {
          if (Math.abs(snapped - sp) <= snapRadius) {
            vibrate(10);
            return sp;
          }
        }
        return snapped;
      }

      function applyLockingForce(currentValue) {
        for (const sp of snapPoints) {
          const dist = currentValue - sp;
          if (Math.abs(dist) < snapRadius) {
            return -dist * lockForce;
          }
        }
        return 0;
      }

      function updateUI() {
        thumb.style.left = value + '%';
        thumb.setAttribute('aria-valuenow', Math.round(value));
        label.textContent = Math.round(value) + '%';
        label.style.left = value + '%';
      }

      function physicsLoop() {
        if (dragging && pointerX !== null) {
          const rect = slider.getBoundingClientRect();
          const desired = ((pointerX - rect.left) / rect.width) * 100;
          let diff = desired - value;
          velocity += diff * 0.12;
          velocity += applyLockingForce(value);
          velocity *= 0.75;
          velocity = Math.max(Math.min(velocity, 2), -2);
        } else {
          velocity *= 0.45;
          if (Math.abs(velocity) < 0.005) velocity = 0;
        }

        value += velocity;

        if (value < 0) {
          value = 0;
          velocity = -velocity * 0.25;
          triggerBounce('left');
        } else if (value > 100) {
          value = 100;
          velocity = -velocity * 0.25;
          triggerBounce('right');
        }

        updateUI();
        animationFrame = requestAnimationFrame(physicsLoop);
      }

      function onPointerDown(e) {
        if (e.pointerType === 'mouse' || e.pointerType === 'touch') {
          e.preventDefault();
          dragging = true;
          pointerX = e.clientX;
          thumb.classList.add('dragging');
          window.addEventListener('pointermove', onPointerMove);
          window.addEventListener('pointerup', onPointerUp);
          window.addEventListener('pointercancel', onPointerUp);
          clearBounce();
          clearSnap();
          vibrate(8);
        }
      }

      function onPointerMove(e) {
        pointerX = e.clientX;
      }

      function onPointerUp() {
        dragging = false;
        pointerX = null;
        thumb.classList.remove('dragging');
        window.removeEventListener('pointermove', onPointerMove);
        window.removeEventListener('pointerup', onPointerUp);
        window.removeEventListener('pointercancel', onPointerUp);

        const snappedVal = snapToValue(value);
        if (Math.abs(snappedVal - value) > 0.01) {
          thumb.classList.add('snap-bounce');
          snapTimeout = setTimeout(() => {
            thumb.classList.remove('snap-bounce');
          }, 400);
        }
        value = snappedVal;
        velocity = 0;
        updateUI();
        triggerBounce();
      }

      thumb.addEventListener('pointerdown', onPointerDown);

      updateUI();
      physicsLoop();
    })();
  </script>

</body>
</html>
